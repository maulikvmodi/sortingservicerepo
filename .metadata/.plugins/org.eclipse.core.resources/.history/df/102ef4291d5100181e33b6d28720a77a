package com.hm.sortingservice.sortingservice.controller;

import java.util.Arrays;
import java.util.Random;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.hm.sortingservice.constants.SortingServiceConstants;


@RestController
public class SortNumbersController {

	private JSONObject sortedArrayObject = new JSONObject();
	private int sortedArrayObjKey =1; 
	private JSONArray randomNumberArrayClone;
	private int arr[];
	
	@RequestMapping(value="/getRandomNumbers", method=RequestMethod.GET)
	public @ResponseBody String getRandomNumbersArray() {
		System.out.println("insied getRandomNumbersArray");
		JSONArray randomNumArray = new JSONArray();
		
		for(int randomCount = 0; randomCount < 50; randomCount++) {
			Random r = new Random();
			randomNumArray.put(r.ints(1,(100+1)).limit(1).findFirst().getAsInt());
		}
		return randomNumArray.toString();
	}
	
	@RequestMapping(value="/sortRandomNumbers", method=RequestMethod.POST)
	public @ResponseBody String sortRandomArray(@RequestParam("randomObj") String randomArrayString) {
		try {
			System.out.println("JSONArray: " + randomArrayString);
			JSONArray randomNumberArray = new JSONArray(randomArrayString);
			this.arr = new int[randomNumberArray.length()];
			for(int i=0;i<randomNumberArray.length();i++) {
				this.arr[i]= randomNumberArray.getInt(i);
			}
			randomNumberArrayClone = new JSONArray();
			implementSortingAlgorithm();
			return sortedArrayObject.toString();
		} catch (JSONException e) {
			e.printStackTrace();
		}
		return null; 
	}
	
	
	
	private void implementSortingAlgorithm() {
		try {
			int length = this.arr.length;
			int tempVar;
			for(int randomNumCount =0; randomNumCount<length;randomNumCount++) {
				for(int i = 0;i<length-1;i++) {
					tempVar = i+1;
					if(this.arr[i] > this.arr[tempVar]) {
						swapNumbers(i, tempVar);
					}
				}
				printNumbers();
				sortedArrayObject.put(SortingServiceConstants.KEY, Integer.toString(randomNumCount));
				sortedArrayObject.put(SortingServiceConstants.VALUE, new JSONArray(Arrays.asList(this.arr)));
				randomNumberArrayClone.put(sortedArrayObject);
			}
		}catch(Exception e) {
			e.printStackTrace();
		}
	}
	
	private void swapNumbers(int firstNumber, int secondNumber) {
		try {
			int tempVar = this.arr[firstNumber];
			this.arr[firstNumber] = this.arr[secondNumber];
			this.arr[secondNumber]= tempVar;
		}catch(Exception e) {
			e.printStackTrace();
		}
	}
	
	private void printNumbers() {
		for (int i = 0; i < this.arr.length; i++) {
            System.out.print(this.arr[i] + ", ");
        }
        System.out.println("\n");
	}
	
}

